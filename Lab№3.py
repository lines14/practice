#!/usr/bin/env python
# coding: utf-8

# In[ ]:


print('Задание №1:')
import random
# создание списка из 10 целых чисел, случайно выбранных из отрезка [-99;99]:
z = [random.randint(-99,99) for y in range(10)]
print(f'Список из 10 целых чисел, случайно выбранных из отрезка [-99;99]:\n{z}')
# создание списка из элементов первого списка, возведённых в квадрат:
x = []
for y in z[0:10]:
    y = y**2
    x.append(y)
print(f'Список из элементов первого списка, возведённых в квадрат:\n{x}')
# создание двух списков из отрицательных и положительных элементов первого списка соответственно:
w = []
i = []
for y in z[0:10]:
    if y<0:
        w.append(y)
    elif y>0:
        i.append(y)
if not w==[]:
    print(f'Список из отрицательных элементов первого списка:\n{w}')
else:
    print('В первом списке отсутствуют отрицательные элементы.')
if not i==[]:
    print(f'Список из положительных элементов первого списка:\n{i}')
else:
    print('В первом списке отсутствуют положительные элементы.')


# In[ ]:


n = float(input('Задание №2:\nЭто программа для вычисления суммы заданных чисел со случайными знаками:\nЗадайте желаемое количество вводимых для расчёта чисел: '))
# Проверяем введённое число на соответствие условиям из задания:
if not float.is_integer(n) or n<=1:
    print('Введённое число меньше или равно единице, либо не является целым.')
else:
    n = int(n)
    import random
# Задаём переменную для нумерации вводимых пользователем элементов
# и пустые списки для дальнейшего добавления в них данных:
    w = 1
    i = []
    x = []
    p = []
# Формируем единым циклом с условиями первый (начальный) список из введённых пользователем чисел,
# второй список из случайно выпавших математических знаков
# и третий (итоговый) список, представляющий из себя копию первого списка
# с действующими на элементы математическими знаками из второго списка:
    for y in range(n):
        print(f'Введите желаемое число №{w}:')
        z = float(input())
        i.append(z)
# Условием исключаем перед формированием второго и третьего списков первый элемент из первого списка,
# чтобы на него не влиял эффект смены математического знака:
        if w>=2:
            q = random.choice(['+','-'])
            x.append(q)
            if q=='-':
                p.append(-z)
            elif q=='+':
                p.append(z)
            else:
                pass
        w+=1
    print(f'Сформирован список из введённых чисел:{i}')
    print(f'Сформирован список из случайно выпавших математических знаков:{x}')
# Вновь добавляем в итоговый список первый элемент из начального, заданного пользователем списка чисел
# и находим функцией сумму всех его элементов, которая и будет являться суммой
# всех заданных изначально пользователем чисел с учётом всех случайно выпавших математических знаков:
    p.insert(0,i[0])
    print(f'Сумма чисел с учётом случайно выпавших знаков: {sum(p)}')


# In[ ]:


print('Задание №3 (вариант №1):')
# Создаём двумерный список "5х5" из случайных чисел на отрезке [-5;5]:
import numpy
x = list([numpy.random.randint(-5,5) for j in range(5)] for y in range(5))
print(f'Сформирован двумерный список "5х5" из случайных чисел:\n{x}')
# Перебираем двумерный список циклами для вывода в виде "квадратного" массива:
print('Вывод полученного списка в виде "квадратного" массива:')
for k in x:
    for c in k:
        print(c,end='  ')
    print()
# Перед циклами и в теле внешнего цикла задаём переменные для отсчёта итераций циклического разложения двумерного списка
# (для текстовых описаний положений элементов в строках) и вычисления индексов найденных элементов со значением 0,
# а также пустой список для итогового подсчёта суммы квадратов индексов строк найденных элементов
# и контрольную переменную на случай полного отсутствия в списке элементов со значением 0:
w = 1
p = 0
n = []
g = 0
for y in x:
    u = 1
    v = 0
    for j in y:
        if j==0:
            g = 1
            print(f'Элемент со значением 0 находится на {u} месте в строке №{w},\nиндекс элемента:{[p]}{[v]}')
# В случае нахождения элемента со значением 0, извлекаем индекс содержащей его строки в отдельную переменную
# и возводим его в квадрат с последующим добавлением в итоговый список для подсчёта суммы квадратов индексов:
            h = p
            h = h**2
            n.append(h)
        v+=1
        u+=1
    p+=1
    w+=1
# В случае наличия в списке элементов со значением 0, находим сумму квадратов индексов строк,
# содержащих данные элементы (ранее добавленных в отдельный список):
if g==1:
    print(f'Сумма квадратов индексов строк найденных элементов равна: {sum(n)}')
elif g==0:
    print('Элементов со значением 0 не найдено, перезапустите программу.')


# In[ ]:


print('Задание №3 (вариант №2):')
# Создаём двумерный "квадратный" список "5х5" (массив) из случайных чисел на отрезке [-5;5]:
import numpy
x = numpy.array(list([numpy.random.randint(-5,5) for j in range(5)] for y in range(5)))
print(f'Сформирован двумерный "квадратный" список "5х5" (массив) из случайных чисел:\n{x}')
# Перед циклами и в теле внешнего цикла задаём переменные для отсчёта итераций циклического разложения двумерного списка
# (для текстовых описаний положений элементов в строках) и вычисления индексов найденных элементов со значением 0,
# а также пустой список для итогового подсчёта суммы квадратов индексов строк найденных элементов
# и контрольную переменную на случай полного отсутствия в списке элементов со значением 0:
w = 1
p = 0
n = []
g = 0
for y in x:
    u = 1
    v = 0
    for j in y:
        if j==0:
            g = 1
            print(f'Элемент со значением 0 находится на {u} месте в строке №{w},\nиндекс элемента:{[p]}{[v]}')
# В случае нахождения элемента со значением 0, извлекаем индекс содержащей его строки в отдельную переменную
# и возводим его в квадрат с последующим добавлением в итоговый список для подсчёта суммы квадратов индексов:
            h = p
            h = h**2
            n.append(h)
        v+=1
        u+=1
    p+=1
    w+=1
# В случае наличия в списке элементов со значением 0, находим сумму квадратов индексов строк,
# содержащих данные элементы (ранее добавленных в отдельный список):
if g==1:
    print(f'Сумма квадратов индексов строк найденных элементов равна: {sum(n)}')
elif g==0:
    print('Элементов со значением 0 не найдено, перезапустите программу.')


# In[ ]:


n = float(input('Задание №4:\nВведите желаемое количество строк массива [n] (при условии n>2): '))
m = float(input('Введите желаемое количество столбцов массива [m] (при условии m>2): '))
# Проверяем введённые числа на соответствие условиям из задания:
if not float.is_integer(n) or not float.is_integer(m) or n<=2 or m<=2:
    print('Введённое число меньше или равно двум, либо не является целым.')
else:
    n = int(n)
    m = int(m)
# Задаём пустой список для дальнейшего формирования итогового двумерного списка
# и переменную для проверки индексов элементов этого списка на чётность/нечётность
# (методом подсчёта итераций циклов):
    v = 0
    z = []
# Задаём другой пустой список для формирования подсписков итогового двумерного списка,
# другую переменную для проверки индексов элементов этих подсписков на чётность/нечётность
# и формируем циклом в цикле двумерный список с количеством элементов, заданным изначально пользователем:
    for y in range(n):
        p = 0
        w = []
# Условия проверки индексов элементов на чётность/нечётность (делится с остатком или нет)
# позволяют заполнить список элементами со значениями 0 и 1 в правильной последовательности:
        if v%2==0:        
            for j in range(m):
                if p%2==0:
                    w.append(0)
                else:
                    w.append(1)
                p+=1
        else:
            for i in range(m):
                if p%2==0:
                    w.append(1)
                else:
                    w.append(0)
                p+=1
        z.append(w)
        v+=1
    print(f'Сформирован двумерный список, заполненный символами 0 и 1 в шахматном порядке:\n{z}')
# Перебираем итоговый двумерный список циклами для вывода в виде массива:
print('Вывод полученного списка в виде массива:')
for u in z:
    for q in u:
        print(q,end=' ')
    print()


# In[ ]:





# In[ ]:




